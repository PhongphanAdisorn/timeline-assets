import { HttpClient, HttpEventType, HttpRequest, HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
const BaseServer = "https://highwaydistrict.com/doh_district/api";
export class TimelineAssetsService {
    constructor(http) {
        this.http = http;
        this.baseUrl = BaseServer;
        this.tools = new AppTools;
    }
    /**
        * Create new maintenance history
        * @param data | Object
        * @returns Promise
      */
    createMaintenance(data) {
        const url = `${this.baseUrl}/timeline/create-maintenance`;
        const params = this.tools.genFormData(data);
        return this.http.post(url, params).pipe(map((res) => res === null || res === void 0 ? void 0 : res.data)).toPromise();
    }
    /**
      * Create new condition report
      * @param data | Object
      * @returns Promise
    */
    createConditionReport(data) {
        const url = `${this.baseUrl}/timeline/create-condition`;
        const params = this.tools.genFormData(data);
        return this.http.post(url, params).pipe(map((res) => res === null || res === void 0 ? void 0 : res.data)).toPromise();
    }
    /** =========================================================================
     * Upload file to timline
     * @param assetType
     * @param assetId
     * @param file
     * @returns Observable
     */
    uploadFile(mainId, assetType, assetId, file, isMaintenance) {
        const formData = new FormData();
        formData.append('mainId', mainId);
        formData.append('assetType', assetType);
        formData.append('assetId', assetId);
        formData.append('file', file);
        const maintenance = (isMaintenance) ? '/maintenance' : '';
        const url = `${this.baseUrl}/timeline/upload-file${maintenance}`;
        const request = new HttpRequest('POST', url, formData, {
            reportProgress: true,
            responseType: 'json'
        });
        return this.http.request(request).pipe(map((event) => {
            //-- Uploading...
            if (event.type === HttpEventType.UploadProgress)
                return Math.round(100 * event.loaded / event.total);
            //-- Uploaded
            // if (event.type === 3) return 100;
            //-- Uploaded response
            if (event instanceof HttpResponse)
                return event.body;
            //-- orther
            return event;
        }));
    }
    /** ======================================================================
     * Download file
     * */
    downloadFile(assetType, assetId, fileName) {
        const formData = new FormData();
        const url = `${this.baseUrl}/timeline/download/${assetType}/${assetId}/${fileName}`;
        const request = new HttpRequest('POST', url, formData, {
            reportProgress: true,
            responseType: 'blob'
        });
        return this.http.request(request).pipe(map((event) => {
            //-- loading... HttpHeaderResponse
            if (event.type === HttpEventType.DownloadProgress)
                return event.loaded;
            //-- response
            if (event instanceof HttpResponse)
                return event.body;
            //-- orther
            return event;
        }));
    }
    /** ======================================================================
     * Load timeline data
     * =====================================================================*/
    getTimeline(assetType, assetId, period, periodType) {
        const formData = new FormData();
        formData.append('assetType', assetType);
        formData.append('assetId', assetId);
        if (period)
            formData.append('period', period);
        if (periodType)
            formData.append('periodType', periodType);
        const url = `${this.baseUrl}/timeline/asset-timeline`;
        return this.http.post(url, formData).pipe(map((res) => res === null || res === void 0 ? void 0 : res.data)).toPromise();
    }
    getMaintenanceHistoryWithFile(mainId) {
        const url = `${this.baseUrl}/timeline/maintenance-history/${mainId}`;
        return this.http.get(url).pipe(map((res) => res === null || res === void 0 ? void 0 : res.data)).toPromise();
    }
    getConditionReportWithFile(mainId) {
        const url = `${this.baseUrl}/timeline/condition-report/${mainId}`;
        return this.http.get(url).pipe(map((res) => res === null || res === void 0 ? void 0 : res.data)).toPromise();
    }
}
TimelineAssetsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TimelineAssetsService_Factory() { return new TimelineAssetsService(i0.ɵɵinject(i1.HttpClient)); }, token: TimelineAssetsService, providedIn: "root" });
TimelineAssetsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
TimelineAssetsService.ctorParameters = () => [
    { type: HttpClient }
];
// app tools gan form data
export class AppTools {
    constructor() {
        this.twoDigi = (num) => (`0${num}`).slice(-2);
    }
    // gan form data
    genFormData(object, form, namespace) {
        const formData = form || new FormData();
        for (let property in object) {
            if (object.hasOwnProperty(property) && object[property] != null && object[property] !== undefined) {
                const formKey = namespace ? `${namespace}[${property}]` : property;
                if (object[property] instanceof Date) {
                    formData.append(formKey, object[property].toISOString());
                }
                else if (typeof object[property] === 'object' && !(object[property] instanceof File)) {
                    this.genFormData(object[property], formData, formKey);
                }
                else {
                    formData.append(formKey, object[property]);
                }
                continue;
            }
        }
        return formData;
    }
    /** Create date time format
     * @param date : Date
     * @return string : 'yyyy-MM-dd HH:mm:ss'
    */
    dateTimeFormat(date) {
        if (!date)
            return null;
        const fTime = `${this.twoDigi(date.getHours())}:${this.twoDigi(date.getMinutes())}:00`;
        return `${date.getFullYear()}-${this.twoDigi(date.getMonth() + 1)}-${this.twoDigi(date.getDate())} ${fTime}`;
    }
}
// budget list api
export class BudgetCodeService {
    constructor(http) {
        this.http = http;
        this.baseUrl = BaseServer;
        this.tools = new AppTools;
    }
    createWithUpdate(params) {
        const url = `${this.baseUrl}/budget-code/create-update`;
        const formData = this.tools.genFormData(params);
        return this.http.post(url, formData).pipe(map((res) => (res === null || res === void 0 ? void 0 : res.data) ? res.data : res)).toPromise();
    }
    /** =================================================================================================
     * Upload file with progress single file only.
     * @param assetTable
     * @param budgetCode
     * @param file
     * @returns Observable
     */
    uploadFile(assetTable, budgetCode, file) {
        const url = `${this.baseUrl}/budget-code/upload-file`;
        const formData = new FormData();
        formData.append('assetType', assetTable);
        formData.append('budgetCode', String(budgetCode).trim());
        formData.append('file', file);
        const request = new HttpRequest('POST', url, formData, {
            reportProgress: true,
            responseType: 'json'
        });
        return this.http.request(request).pipe(map((event) => {
            //-- Uploading...
            if (event.type === HttpEventType.UploadProgress)
                return Math.round(100 * event.loaded / event.total);
            //-- Uploaded response
            if (event instanceof HttpResponse)
                return event.body;
            //-- orther
            return event;
        }));
    }
    /** ======================================================================
     * Download file
     * */
    downloadFile(assetType, fileName) {
        const formData = new FormData();
        const url = `${this.baseUrl}/budget-code/download/${assetType}/${fileName}`;
        const request = new HttpRequest('POST', url, formData, {
            reportProgress: true,
            responseType: 'blob'
        });
        return this.http.request(request).pipe(map((event) => {
            //-- loading... HttpHeaderResponse
            if (event.type === HttpEventType.DownloadProgress)
                return event.loaded;
            //-- response
            if (event instanceof HttpResponse)
                return event.body;
            //-- orther
            return event;
        }));
    }
    /** Finding budget-code */
    findBudgetCode(isAll, assetTable, budgetCode) {
        const findAll = (isAll) ? '/all' : '';
        const url = `${this.baseUrl}/budget-code/find-code${findAll}`;
        const formData = this.tools.genFormData({ assetType: assetTable, findCode: String(budgetCode).trim() });
        return this.http.post(url, formData).pipe(map((res) => (res === null || res === void 0 ? void 0 : res.data) ? res.data : res)).toPromise();
    }
    /** Get asset to used budget-code */
    getAssetUsedCode(budgetCode) {
        const url = `${this.baseUrl}/budget-code/asset-used`;
        const formData = this.tools.genFormData({ budgetCode: budgetCode });
        return this.http.post(url, formData).pipe(map((res) => (res === null || res === void 0 ? void 0 : res.data) ? res.data : res)).toPromise();
    }
}
BudgetCodeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BudgetCodeService_Factory() { return new BudgetCodeService(i0.ɵɵinject(i1.HttpClient)); }, token: BudgetCodeService, providedIn: "root" });
BudgetCodeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
BudgetCodeService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,