import { __awaiter } from "tslib";
import { ChangeDetectorRef, Component, Inject, NgZone } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';
import { IconFiles } from '../../../common/icon-files';
import { UserAuthedService } from '../../../services/user-auth.service';
import { AppTools, BudgetCodeService } from '../../../timeline-assets.service';
import { FadeInGrow, FadeInOut } from './create-event.animation';
const CUSTOM_DATE_FORMATS = {
    parse: {
        dateInput: { month: 'short', year: 'numeric', day: 'numeric' },
    },
    display: {
        dateInput: { month: 'short', year: 'numeric', day: 'numeric' },
        monthYearLabel: { year: 'numeric', month: 'numeric' },
        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
        monthYearA11yLabel: { year: 'numeric', month: 'long' },
    }
};
const ɵ0 = CUSTOM_DATE_FORMATS;
export class AddBudgetCodeMaintenanceComponent {
    constructor(_ref, _zone, _dialog, data, _dateAdapter, _authed, _budgetCodeAPI) {
        this._ref = _ref;
        this._zone = _zone;
        this._dialog = _dialog;
        this._dateAdapter = _dateAdapter;
        this._authed = _authed;
        this._budgetCodeAPI = _budgetCodeAPI;
        this.dialogType = 'Viewer';
        this.currentDate = new FormControl(new Date(), [Validators.required]);
        this.searchBudgetCode = new FormControl(null, [Validators.required]);
        this.searchAsset = new FormControl(null);
        this.selectedOptions = new FormControl(new Array(), [Validators.required]);
        this.listBudgetCode = new Array();
        this.assetsUseBudgetCode = new Array();
        // public listGeomCopy: Array<any> = new Array();
        this.listGeom = new Array();
        this.filesUpload = new Array();
        /** Subscription */
        this._subscription = {};
        this._dateAdapter.setLocale('th-TH');
        // console.log('Dialog-Data:', data);
        this.title = data === null || data === void 0 ? void 0 : data.title;
        this.assetTable = data === null || data === void 0 ? void 0 : data.assetTable;
        this.dialogType = data === null || data === void 0 ? void 0 : data.dialogType;
        this.listGeom = this.mapFormat(data === null || data === void 0 ? void 0 : data.listGeom);
        if (data === null || data === void 0 ? void 0 : data.budgetCode)
            this.getViewBudgetCode(data === null || data === void 0 ? void 0 : data.budgetCode);
        // this.listGeomCopy = this.listGeom.filter(o => o?.id);
        // const selected = this.listGeom.filter(o => [7407, 7410, 7412].includes(o?.id));
        // this.selectedOptions.setValue(selected);
    }
    ngOnInit() {
        this.filteredAssets = this.searchAsset.valueChanges.pipe(debounceTime(400), distinctUntilChanged(), map(value => {
            const keyword = value.toLowerCase();
            if (keyword === null || keyword === void 0 ? void 0 : keyword.length)
                return this.listGeom.filter(obj => obj.title.toLowerCase().indexOf(keyword) !== -1);
            return this.listGeom.slice();
        }));
    }
    ngAfterViewInit() {
        this.searchAsset.setValue('', { emitEvent: true }); //-- Trigger asset search box
        this._subscription.searchBudgetCode = this.searchBudgetCode.valueChanges.pipe(debounceTime(400), distinctUntilChanged()).subscribe(value => {
            var _a;
            if ((_a = this.activeBudgetCode) === null || _a === void 0 ? void 0 : _a.budgetCode) {
                this.activeBudgetCode = null;
                this.selectedOptions.setValue([]);
                this._ref.detectChanges();
            }
        });
    }
    ngOnDestroy() {
        this._dateAdapter.setLocale('en-EN');
        for (const key in this._subscription) {
            if (Object.prototype.hasOwnProperty.call(this._subscription, key))
                this._subscription[key].unsubscribe();
        }
    }
    mapFormat(arr) {
        return arr.sort((a, b) => {
            const sA = (a === null || a === void 0 ? void 0 : a.skm) ? Number(String(a === null || a === void 0 ? void 0 : a.skm).replace('+', '.')) : Number(String(a === null || a === void 0 ? void 0 : a.km_location).replace('+', '.'));
            const sB = (b === null || b === void 0 ? void 0 : b.skm) ? Number(String(b === null || b === void 0 ? void 0 : b.skm).replace('+', '.')) : Number(String(b === null || b === void 0 ? void 0 : b.km_location).replace('+', '.'));
            return (sB < sA) ? 1 : -1;
        });
    }
    /** Handler Form */
    setFormDisabled() {
        this.currentDate.disable();
        this.searchBudgetCode.disable();
        this.selectedOptions.disable();
    }
    setFormEnabled() {
        this.currentDate.enable();
        this.searchBudgetCode.enable();
        this.selectedOptions.enable();
    }
    getViewBudgetCode(budgetCode) {
        this.preLoading = true;
        this._budgetCodeAPI.findBudgetCode(false, this.assetTable, budgetCode).then(res => {
            var _a;
            if (res === null || res === void 0 ? void 0 : res.length) {
                this.setActiveBudgetCode(res[0]);
                const reportDate = (_a = res[0]) === null || _a === void 0 ? void 0 : _a.reportDate;
                this.searchBudgetCode.setValue(budgetCode, { emitEvent: false });
                this.currentDate.setValue(new Date(reportDate), { emitEvent: false });
            }
            this.preLoading = false;
        }, err => {
            this.preLoading = false;
        });
    }
    findingBudgetCode() {
        this.loadingSearch = true;
        this._budgetCodeAPI.findBudgetCode(true, this.assetTable, this.searchBudgetCode.value).then(res => {
            this.listBudgetCode = (res === null || res === void 0 ? void 0 : res.length) ? res : [];
            this.loadingSearch = false;
            this.errFindMessage = null;
        }, err => {
            var _a;
            this.errFindMessage = 'ไม่พบรหัสงประมาณ';
            this.listBudgetCode = new Array();
            this.loadingSearch = false;
            if ((_a = this.activeBudgetCode) === null || _a === void 0 ? void 0 : _a.budgetCode) {
                this.activeBudgetCode = null;
                this.selectedOptions.setValue([]);
                this._ref.detectChanges();
            }
        });
    }
    getAssetUsedCode() {
        var _a;
        this.preLoading = true;
        this._budgetCodeAPI.getAssetUsedCode((_a = this.activeBudgetCode) === null || _a === void 0 ? void 0 : _a.budgetCode).then(res => {
            this.assetsUseBudgetCode = (res === null || res === void 0 ? void 0 : res.length) ? res : [];
            if (res === null || res === void 0 ? void 0 : res.length) {
                let assetIds = this.assetsUseBudgetCode.filter(o => { var _a; return ((o === null || o === void 0 ? void 0 : o.assetTable) === this.assetTable && ((_a = o === null || o === void 0 ? void 0 : o.assets) === null || _a === void 0 ? void 0 : _a.length)); }).map(o => o.assets);
                assetIds = ((assetIds === null || assetIds === void 0 ? void 0 : assetIds.length) > 0) ? assetIds[0].map(o => o.assetId) : [];
                const selected = this.listGeom.filter(o => assetIds.includes(o === null || o === void 0 ? void 0 : o.id));
                if (selected === null || selected === void 0 ? void 0 : selected.length) {
                    this.selectedOptions.setValue(selected);
                    this._ref.detectChanges();
                }
            }
            this.preLoading = false;
        }, err => {
            this.preLoading = false;
        });
    }
    setActiveBudgetCode(budgetCode) {
        var _a, _b;
        if (((_a = this.activeBudgetCode) === null || _a === void 0 ? void 0 : _a.title) === (budgetCode === null || budgetCode === void 0 ? void 0 : budgetCode.title)) {
            this.activeBudgetCode = null;
            this.selectedOptions.setValue([]);
            this._ref.detectChanges();
            return;
        }
        this.activeBudgetCode = budgetCode;
        this.getAssetUsedCode();
        const assetIds = ((_b = budgetCode === null || budgetCode === void 0 ? void 0 : budgetCode.assetIds) === null || _b === void 0 ? void 0 : _b.length) ? budgetCode.assetIds : [];
        const selected = this.listGeom.filter(o => assetIds.includes(String(o === null || o === void 0 ? void 0 : o.id)));
        if (selected === null || selected === void 0 ? void 0 : selected.length)
            this.selectedOptions.setValue(selected);
    }
    /** ===============================================================================
       * File handlering
       * @param el
       */
    inputFiles(el) {
        const files = el.target.files;
        const filesArr = new Array();
        for (const file of files) {
            const extension = String(file.name).substring(String(file.name).lastIndexOf('.') + 1);
            const type = String(file.type).split('/')[0];
            const format = {
                thumb: null,
                name: file.name,
                file: file,
                size: file.size,
                progress: 0
            };
            if (file.type.match(/image\/*/) && type != 'svg') {
                this.readImage(format);
            }
            else {
                format.thumb = IconFiles.iconFile(String(extension).toLowerCase());
            }
            filesArr.unshift(format);
        }
        this._zone.run(() => __awaiter(this, void 0, void 0, function* () {
            this.filesUpload = [...filesArr, ...this.filesUpload];
        }));
    }
    /** Reander image file */
    readImage(file) {
        let previewUrl = '';
        const reader = new FileReader();
        reader.onload = (_event) => {
            file.thumb = reader.result;
        };
        reader.readAsDataURL(file.file);
        return file;
    }
    /** Display size type
     * 10 KB | MB | GB
    */
    readFileSize(size) {
        if (!size)
            return '';
        if (size <= ((Math.pow(2, 10)) * 1024))
            return `${(size / (Math.pow(2, 10))).toFixed(2)} KB`;
        if (size <= ((Math.pow(2, 20)) * 1024))
            return `${(size / (Math.pow(2, 20))).toFixed(2)} MB`;
        return `${(size / (Math.pow(2, 30))).toFixed(2)} GB`;
    }
    /** View extention */
    getFileIcon(extension, fileUrl) {
        const isImage = ['jpg', 'png', 'jpeg', 'gif', 'svg'].includes(String(extension).toLowerCase());
        if (isImage && fileUrl)
            return fileUrl;
        return IconFiles.iconFile(String(extension).toLowerCase());
    }
    /** Delete file item */
    delFile(position) {
        this.filesUpload.splice(position, 1);
    }
    /** Select item */
    selectionChanged(selected) {
        // console.log('selected:', selected, this.selectedOptions.value);
    }
    //---------------------------------------------------------------------------------------------------
    isImageSaved() {
        var _a, _b;
        if (this.isSaved && !((_a = this.filesUpload) === null || _a === void 0 ? void 0 : _a.length))
            return true;
        if (!((_b = this.filesUpload) === null || _b === void 0 ? void 0 : _b.length))
            return false;
        const saving = this.filesUpload.every(o => o.progress == 100);
        return saving;
    }
    saveData() {
        var _a, _b, _c, _d;
        if (this.isSaving)
            return;
        if (!((_a = this.selectedOptions.value) === null || _a === void 0 ? void 0 : _a.length))
            return;
        if (this.currentDate.invalid || this.searchBudgetCode.invalid)
            return;
        const tools = new AppTools();
        const assetIds = this.selectedOptions.value.filter(o => (o === null || o === void 0 ? void 0 : o.id)).map(o => String(o === null || o === void 0 ? void 0 : o.id));
        // console.log('Asset-Ids:', this.assetTable, this.searchBudgetCode.value, assetIds);
        const budgetCode = (_c = (_b = this.activeBudgetCode) === null || _b === void 0 ? void 0 : _b.budgetCode) !== null && _c !== void 0 ? _c : this.searchBudgetCode.value;
        const params = {
            assetType: this.assetTable,
            budgetCode: String(budgetCode).trim(),
            assetIds: assetIds,
            userId: (_d = this._authed.authUser) === null || _d === void 0 ? void 0 : _d.account_id,
            reportDate: tools.dateTimeFormat(this.currentDate.value)
        };
        this.isSaving = true;
        this.setFormDisabled();
        // return;
        console.log('Asset-Ids:', params);
        this._budgetCodeAPI.createWithUpdate(params).then(res => {
            this.isSaved = true;
            if (res === null || res === void 0 ? void 0 : res.budget_code)
                this.uploadAllFile(res === null || res === void 0 ? void 0 : res.budget_code);
        });
    }
    uploadAllFile(budgetCode) {
        let idxFile = 0;
        for (const item of this.filesUpload) {
            this._subscription[`upload-idx-${idxFile}`] = this._budgetCodeAPI.uploadFile(this.assetTable, budgetCode, item.file).subscribe(res => {
                if (typeof res === 'number') {
                    item.progress = res;
                }
            }, err => console.log('%cError occured while uploading file', 'color:tomato'));
            idxFile++;
        }
    }
    downloafFile(file) {
        const extract = String(file === null || file === void 0 ? void 0 : file.fileUrl).split('/');
        const fileName = extract[extract.length - 1];
        this._subscription.downloadFile = this._budgetCodeAPI.downloadFile(this.assetTable, fileName).subscribe(res => {
            if (typeof res === 'number') {
                file.progress = Math.round(100 * res / Number(file === null || file === void 0 ? void 0 : file.size)); //console.log('Percentag:', Math.round(100 * res / Number(file?.size)));
            }
            else if (res instanceof Blob) {
                this.downloadBlob(res, file === null || file === void 0 ? void 0 : file.fileName);
            }
        });
    }
    downloadBlob(blob, filename) {
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename || 'download';
        document.body.appendChild(a);
        setTimeout(() => { a.click(); document.body.removeChild(a); }, 100);
    }
}
AddBudgetCodeMaintenanceComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-add-budget-code-maintenance',
                template: "<div mat-dialog-title>\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"16px\" [style.width.%]=\"100\">\n        <h4 *ngIf=\"dialogType === 'Editor'\" class=\"m-0\">\u0E01\u0E33\u0E2B\u0E19\u0E14\u0E23\u0E2B\u0E31\u0E2A\u0E07\u0E1A\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13\u0E43\u0E19\u0E01\u0E32\u0E23\u0E0B\u0E48\u0E2D\u0E21\u0E1A\u0E33\u0E23\u0E38\u0E07 {{ title }}</h4>\n        <h4 *ngIf=\"dialogType === 'Viewer'\" class=\"m-0\">\u0E23\u0E2B\u0E31\u0E2A\u0E07\u0E1A\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13\u0E43\u0E19\u0E01\u0E32\u0E23\u0E0B\u0E48\u0E2D\u0E21\u0E1A\u0E33\u0E23\u0E38\u0E07{{ title }}: {{\n            activeBudgetCode?.budgetCode }}</h4>\n        <span fxFlex></span>\n        <mat-icon *ngIf=\"dialogType === 'Viewer'\" [style.color]=\"'gray'\" mat-dialog-close>close</mat-icon>\n    </div>\n    <mat-progress-bar *ngIf=\"preLoading\" color=\"warn\" mode=\"indeterminate\" [style.height.px]=\"2\"></mat-progress-bar>\n</div>\n\n<mat-dialog-content class=\"w-100 h-100 m-0\">\n    <div fxLayout=\"row\" fxLayout.sm=\"column\" fxLayoutGap=\"16px\" class=\"w-100 h-100\">\n        <div fxLayout=\"column\" fxFlex=\"50%\" fxFlex.sm=\"65%\" class=\"h-100\">\n            <mat-form-field appearance=\"outline\" color=\"warn\" class=\"w-100\">\n                <mat-label>\u0E27\u0E31\u0E19\u0E17\u0E35\u0E48\u0E40\u0E1E\u0E34\u0E48\u0E21\u0E02\u0E49\u0E2D\u0E21\u0E39\u0E25</mat-label>\n                <input matInput [formControl]=\"currentDate\" [matDatepicker]=\"addDate\" readonly\n                    (click)=\"(dialogType === 'Editor') ? addDate.open() : null\">\n                <mat-datepicker-toggle matSuffix [for]=\"addDate\" [disabled]=\"dialogType === 'Viewer'\">\n                </mat-datepicker-toggle>\n                <mat-datepicker #addDate color=\"warn\" panelClass=\"custom-datepicker-color\"></mat-datepicker>\n            </mat-form-field>\n\n            <div *ngIf=\"dialogType === 'Editor'\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"10px\">\n                <div fxFlex=\"none\">\n                    <strong>\u0E23\u0E2B\u0E31\u0E2A\u0E07\u0E1A\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13</strong>\n                </div>\n                <div fxFlex>\n                    <div class=\"w-100\" style.display=\"block\">\n                        <input matInput [formControl]=\"searchBudgetCode\" placeholder=\"\u0E23\u0E2B\u0E31\u0E2A\u0E07\u0E1A\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13\"\n                            class=\"input-search-code\">\n                        <!-- <mat-error>aofxta</mat-error> -->\n                    </div>\n                </div>\n                <div *ngIf=\"dialogType === 'Editor'\" fxFlex=\"none\">\n                    <button mat-flat-button [disabled]=\"isSaving || loadingSearch\" (click)=\"findingBudgetCode()\"\n                        [style.background-color]=\"'var(--primary-orange)'\">\n                        <mat-icon *ngIf=\"loadingSearch\">\n                            <mat-spinner [diameter]=\"24\"></mat-spinner>\n                        </mat-icon>\n                        <mat-icon *ngIf=\"!loadingSearch\">search</mat-icon>\n                        <strong>&nbsp;\u0E04\u0E49\u0E19\u0E2B\u0E32</strong>\n                    </button>\n                </div>\n            </div>\n            <div *ngIf=\"dialogType === 'Editor'\" [style.padding]=\"'5px 0'\" [style.min-height.px]=\"40\"\n                [style.overflow]=\"'hidden auto'\">\n                <!-- class=\"mat-chip-list-stacked\" -->\n                <small *ngIf=\"errFindMessage\" [style.color]=\"'var(--danger)'\">{{ errFindMessage }}</small>\n                <mat-chip-list *ngIf=\"listBudgetCode?.length\" aria-label=\"Color selection\">\n                    <ng-container *ngFor=\"let item of listBudgetCode\">\n                        <mat-chip (click)=\"setActiveBudgetCode(item)\"\n                            [selected]=\"item?.title === activeBudgetCode?.title\" [disabled]=\"isSaving\" color=\"accent\">\n                            <strong>{{ item?.budgetCode }}</strong>\n                            <small *ngIf=\"item?.assetCaption\">\n                                <i>({{ item?.assetCaption }})</i>\n                            </small>\n                            <span>&nbsp;</span>\n                            <mat-icon [style.color]=\"'#404040'\">vpn_key</mat-icon>\n                        </mat-chip>\n                    </ng-container>\n                </mat-chip-list>\n            </div>\n\n            <ng-container *ngIf=\"dialogType === 'Editor'\">\n                <div [style.margin-top.px]=\"16\">\n                    <strong [style.color]=\"'#404040'\">\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23\u0E17\u0E23\u0E31\u0E1E\u0E22\u0E4C\u0E2A\u0E34\u0E19\u0E17\u0E35\u0E48\u0E43\u0E0A\u0E49\u0E23\u0E2B\u0E31\u0E2A\u0E07\u0E1A\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13</strong>\n                    <span fxFlex></span>\n                    <strong *ngIf=\"selectedOptions.value?.length\" [style.color]=\"'#404040'\">\n                        {{ selectedOptions.value?.length }} \u0E23\u0E32\u0E22\u0E01\u0E32\u0E23\n                    </strong>\n                </div>\n                <div class=\"w-100\">\n                    <mat-form-field appearance=\"none\" color=\"warn\" class=\"search-box-asset\">\n                        <input matInput [formControl]=\"searchAsset\" placeholder=\"\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23\u0E17\u0E23\u0E31\u0E1E\u0E22\u0E4C\u0E2A\u0E34\u0E19...\">\n                        <mat-icon matSuffix>search</mat-icon>\n                    </mat-form-field>\n                </div>\n                <div fxFlex=\"grow\" [style.position]=\"'relative'\">\n                    <div class=\"w-100 h-100\" [style.position]=\"'absolute'\" [style.overflow-y]=\"'auto'\">\n                        <mat-selection-list dense color=\"warn\" [formControl]=\"selectedOptions\"\n                            (selectionChange)=\"selectionChanged($event)\">\n                            <ng-container *ngFor=\"let item of filteredAssets | async; last as isLast\">\n                                <mat-list-option checkboxPosition=\"before\" [value]=\"item\">\n                                    <div mat-line>\n                                        <strong>{{ item?.title }}</strong>\n                                    </div>\n                                    <div *ngIf=\"item?.linkpath_detail\" mat-line>\u0E17\u0E32\u0E07\u0E40\u0E0A\u0E37\u0E48\u0E2D\u0E21: {{ item?.linkpath_detail }}\n                                    </div>\n                                </mat-list-option>\n                                <mat-divider *ngIf=\"!isLast\"></mat-divider>\n                            </ng-container>\n                        </mat-selection-list>\n                    </div>\n                </div>\n            </ng-container>\n\n            <!--=== Asset in budget-code ===-->\n            <ng-container *ngIf=\"dialogType === 'Viewer' && activeBudgetCode?.budgetCode\">\n                <ng-container *ngTemplateOutlet=\"tempAssetListFoBudget\"></ng-container>\n            </ng-container>\n        </div>\n\n        <div fxLayout=\"column\" fxFlex=\"50%\" fxFlex.sm=\"35%\" class=\"h-100\" [style.padding-top.px]=\"4\">\n            <div fxLayout=\"row\" fxLayoutGap=\"16px\" class=\"w-100\">\n                <ng-container *ngIf=\"dialogType === 'Viewer'\">\n                    <strong>\u0E44\u0E1F\u0E25\u0E4C\u0E17\u0E35\u0E48\u0E41\u0E19\u0E1A\u0E21\u0E32</strong>\n                    <span fxFlex></span>\n                    <strong>{{ activeBudgetCode?.files?.length || 0 }} \u0E44\u0E1F\u0E25\u0E4C</strong>\n                </ng-container>\n\n                <ng-container *ngIf=\"dialogType === 'Editor'\">\n                    <button fxFlex=\"70%\" mat-flat-button (click)=\"fileMultiple.click()\" [disabled]=\"isSaving\"\n                        [style.background-color]=\"'var(--primary-orange)'\">\n                        <mat-icon>attach_file</mat-icon>\n                        <strong>\u0E41\u0E19\u0E1A\u0E44\u0E1F\u0E25\u0E4C</strong>\n                        <input #fileMultiple type=\"file\" name=\"file[]\" multiple (change)=\"inputFiles($event)\"\n                            style=\"display: none\">\n                    </button>\n\n                    <button fxFlex=\"30%\" mat-button>\n                        <strong>{{ filesUpload?.length }} \u0E44\u0E1F\u0E25\u0E4C</strong>\n                    </button>\n                </ng-container>\n            </div>\n\n            <div fxFlex=\"grow\" [style.position]=\"'relative'\">\n                <div class=\"w-100 h-100\" [style.position]=\"'absolute'\" [style.overflow-y]=\"'auto'\">\n                    <mat-list dense>\n                        <div *ngIf=\"filesUpload?.length\" [@fadeInGrow]>\n                            <ng-container *ngFor=\"let file of filesUpload; let idx = index;\">\n                                <mat-list-item>\n                                    <img matListAvatar [src]=\"file?.thumb\" [style.borderRadius.px]=\"5\">\n                                    <div matLine>{{ file?.name }}</div>\n                                    <div matLine>\n                                        <small>Size:&nbsp;{{ readFileSize(file?.size) }}</small>\n                                        <small fxFlex></small>\n                                        <small *ngIf=\"file?.progress && file?.progress < 100\">{{ file?.progress }}\n                                            %</small>\n                                    </div>\n                                    <div *ngIf=\"file?.progress > 0 && file?.progress < 100\" mat-line>\n                                        <mat-progress-bar mode=\"determinate\" [value]=\"file?.progress\" color=\"warn\">\n                                        </mat-progress-bar>\n                                    </div>\n                                    <mat-icon *ngIf=\"file?.progress === 100\" [style.color]=\"'var(--success)'\">\n                                        check_circle\n                                    </mat-icon>\n                                    <button *ngIf=\"!isSaving\" mat-icon-button matSuffix (click)=\"delFile(idx)\"\n                                        [style.color]=\"'gray'\">\n                                        <mat-icon>cancel</mat-icon>\n                                    </button>\n                                </mat-list-item>\n                            </ng-container>\n                        </div>\n\n                        <div *ngIf=\"activeBudgetCode?.files?.length\" [@fadeInGrow]>\n                            <ng-container *ngFor=\"let file of activeBudgetCode.files;\">\n                                <mat-list-item>\n                                    <img matListAvatar [src]=\"getFileIcon(file?.extension, file?.fileUrl)\"\n                                        [style.borderRadius.px]=\"5\">\n                                    <div matLine>&nbsp;&nbsp;{{ file?.fileName }}</div>\n                                    <div matLine>&nbsp;&nbsp;\n                                        <small>Size:&nbsp;{{ readFileSize(file?.size) }}</small>\n                                    </div>\n                                    <div *ngIf=\"file?.progress > 0 && file?.progress < 100\" mat-line>\n                                        <mat-progress-bar mode=\"determinate\" [value]=\"file?.progress\" color=\"warn\">\n                                        </mat-progress-bar>\n                                    </div>\n                                    <button mat-icon-button [style.color]=\"'gray'\"\n                                        [disabled]=\"file?.progress && file?.progress !== 100\"\n                                        (click)=\"downloafFile(file)\">\n                                        <mat-icon>download</mat-icon>\n                                    </button>\n                                </mat-list-item>\n                            </ng-container>\n                        </div>\n                    </mat-list>\n                </div>\n            </div>\n\n            <!--=== Asset in budget-code ===-->\n            <ng-container *ngIf=\"dialogType === 'Editor' && activeBudgetCode?.budgetCode\">\n                <ng-container *ngTemplateOutlet=\"tempAssetListFoBudget\"></ng-container>\n            </ng-container>\n        </div>\n    </div>\n</mat-dialog-content>\n\n<mat-dialog-actions *ngIf=\"dialogType === 'Editor'\">\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"16px\" [style.width.%]=\"100\">\n        <span fxFlex></span>\n\n        <button mat-button mat-dialog-close [disabled]=\"isSaving\">\n            <strong>\u0E22\u0E01\u0E40\u0E25\u0E34\u0E01</strong>\n        </button>\n\n        <div matTooltip=\"\u0E42\u0E1B\u0E23\u0E14\u0E23\u0E30\u0E1A\u0E38\u0E23\u0E2B\u0E31\u0E2A\u0E07\u0E1A\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13\" [matTooltipDisabled]=\"activeBudgetCode?.budgetCode\">\n            <button *ngIf=\"!isImageSaved()\"\n                [disabled]=\"!activeBudgetCode?.budgetCode\" mat-flat-button (click)=\"saveData()\"\n                [style.background-color]=\"'var(--primary-orange)'\">\n                <mat-icon *ngIf=\"isSaving\">\n                    <mat-spinner [diameter]=\"24\"></mat-spinner>\n                </mat-icon>\n                <strong *ngIf=\"!isSaving\">\u0E1A\u0E31\u0E19\u0E17\u0E36\u0E01</strong>\n            </button>\n        </div>\n\n        <button *ngIf=\"isSaved && isImageSaved()\" mat-flat-button [mat-dialog-close]=\"true\"\n            [style.background-color]=\"'var(--primary-orange)'\">\n            <strong>\u0E1B\u0E34\u0E14\u0E1F\u0E2D\u0E23\u0E4C\u0E21</strong>\n        </button>\n    </div>\n</mat-dialog-actions>\n\n<!--============================-->\n<!--=== Asset in budget-code ===-->\n<!--============================-->\n<ng-template #tempAssetListFoBudget>\n    <div>\n        <strong [style.color]=\"'#404040'\" [style.font-size.px]=\"14\">\u0E23\u0E32\u0E22\u0E01\u0E32\u0E23\u0E17\u0E23\u0E31\u0E1E\u0E22\u0E4C\u0E2A\u0E34\u0E19\u0E17\u0E35\u0E48\u0E43\u0E0A\u0E49\u0E23\u0E2B\u0E31\u0E2A\u0E07\u0E1A\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13: {{\n            activeBudgetCode?.budgetCode }}</strong>\n    </div>\n    <div fxFlex=\"grow\" [style.position]=\"'relative'\">\n        <div class=\"w-100 h-100\" [style.position]=\"'absolute'\" [style.overflow-y]=\"'auto'\">\n            <mat-list dense color=\"warn\">\n                <ng-container *ngFor=\"let item of assetsUseBudgetCode; last as isLast\">\n                    <div mat-subheader [style.font-size.px]=\"14\">\n                        <strong>{{ item?.caption }}</strong>\n                    </div>\n                    <mat-list-item *ngFor=\"let itemAss of item?.assets\">\n                        <mat-icon mat-list-icon [style.color]=\"'#404040'\">beenhere</mat-icon>\n                        <div mat-line>\n                            <strong>{{ itemAss?.title }}</strong>\n                        </div>\n                        <div *ngIf=\"itemAss?.description\" mat-line>{{ itemAss?.description }}</div>\n                    </mat-list-item>\n                    <mat-divider *ngIf=\"!isLast\"></mat-divider>\n                </ng-container>\n            </mat-list>\n        </div>\n    </div>\n</ng-template>",
                animations: [FadeInOut, FadeInGrow],
                providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0 }],
                styles: [":host{position:relative;width:100%;height:100%}::ng-deep .dialog-add-code-budget mat-dialog-container{border-radius:12px;padding:16px;overflow:hidden}:host::ng-deep mat-form-field .mat-form-field-infix{padding:.5rem 0}:host::ng-deep mat-calendar.custom-datepicker-color .mat-calendar-body-selected{background-color:var(--primary-orange)!important;color:#fff;font-weight:700}:host::ng-deep mat-form-field.search-box-asset{width:100%}:host::ng-deep mat-form-field.search-box-asset .mat-form-field-wrapper{background-color:hsla(0,0%,82.7%,.8);border-radius:3px;padding:8px}:host::ng-deep mat-form-field.search-box-asset .mat-form-field-wrapper .mat-form-field-flex{padding:3px 16px;border-radius:30px;background-color:#fff}:host::ng-deep mat-form-field.search-box-asset .mat-form-field-infix{top:-.15rem;padding:0!important;border-top-width:0!important}:host::ng-deep mat-form-field.search-box-asset .mat-form-field-infix input{line-height:24px}:host::ng-deep mat-form-field.search-box-asset .mat-form-field-suffix{top:.15rem}.input-search-code{width:90%;border:2px solid #404040;border-radius:5px;padding:7px 10px}.input-search-code:disabled{border:1px solid rgba(64,64,64,.1)}:host::ng-deep .mat-list-base[dense] mat-list-option{min-height:40px}:host::ng-deep .mat-list-base[dense] mat-list-option mat-pseudo-checkbox.mat-pseudo-checkbox-checked{background-color:var(--primary-orange)}:host::ng-deep mat-spinner circle{stroke:#404040}"]
            },] }
];
AddBudgetCodeMaintenanceComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: NgZone },
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
    { type: DateAdapter },
    { type: UserAuthedService },
    { type: BudgetCodeService }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,